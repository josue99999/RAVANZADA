#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState

from markers_1 import *
from lab5functions import *

if __name__ == '__main__':

    # Initialize the node
    rospy.init_node("testKineControlPosition")
    print('starting motion ... ')
    # Publisher: publish to the joint_states topic
    pub = rospy.Publisher('joint_states', JointState, queue_size=10)
    # Files for the logs
    fxcurrent = open("/tmp/xcurrent.txt", "w")                
    fxdesired = open("/tmp/xdesired.txt", "w")
    fq = open("/tmp/q.txt", "w")

    # Markers for the current and desired positions
    bmarker_current  = BallMarker(color['RED'])
    bmarker_desired = BallMarker(color['GREEN'])

    # Joint names
    jnames = ['HR_HipX', 'HR_HipY', 'HR_Knee']
    # Desired position
    xd = np.array([0.0, 0.1, -0.25])
    # Initial configuration
    q0 = np.array([0.0, 0.0, 0.0])

    # Resulting initial position (end effector with respect to the base link)
    T = fkine_ur5(q0)
    x0 = T[0:3,3]

    # Red marker shows the achieved position
    bmarker_current.xyz(x0)
    # Green marker shows the desired position
    bmarker_desired.xyz(xd)

    # Instance of the JointState message
    jstate = JointState()
    # Values of the message
    jstate.header.stamp = rospy.Time.now()
    jstate.name = jnames
    # Add the head joint value (with value 0) to the joints
    jstate.position = q0

    # Frequency (in Hz) and control period 
    freq = 1
    dt = 1.0/freq
    rate = rospy.Rate(freq)

    # Initial joint configuration
    q = copy(q0)

    # Ganacia cinematica
    k = 0.5
    #joint_limits_min = np.array([-0.523, -3.49, 0.419])  # Mínimos para cada articulación
    #joint_limits_max = np.array([0.523, 0.349, 2.53])     # Máximos para cada articulación

    # Main loop
    while not rospy.is_shutdown():
        # Current time (needed for ROS)
        jstate.header.stamp = rospy.Time.now()
        
        # Kinematic control law for position (complete here)
        # -----------------------------
        # Jacobiano para la configuracion actual del efector final
        J = jacobian_ur5(q,delta=0.0001)

        # Cinematica directa dada la configuracion actual de q
        T_qact = fkine_ur5(q)
        
        # Extraccion de las coordenadas de posicion
        x = T_qact[0:3,3]

        # Error en la posicion de ajuste
        e = x - xd
    
        # Derivada del error
        de = -k*e

        # Diferencial de la configuracion articular
        if(np.linalg.matrix_rank(J, 1e-4)<3):
            dq = (J.T @ np.linalg.inv(J@J.T + 0.01*np.eye(3)) ).dot(de)    
        else:
            dq = np.linalg.inv(J).dot(de)

        # Integracion de Euler
        q = q + dt*dq

        #q = np.clip(q, joint_limits_min, joint_limits_max)
        # -----------------------------

        # Log values                                                      
        fxcurrent.write(str(x[0])+' '+str(x[1]) +' '+str(x[2])+'\n')
        fxdesired.write(str(xd[0])+' '+str(xd[1])+' '+str(xd[2])+'\n')
        fq.write(str(q[0])+" "+str(q[1])+" "+str(q[2])+ "\n")
        
        # Publish the message
        jstate.position = q
        pub.publish(jstate)
        bmarker_desired.xyz(xd)
        bmarker_current.xyz(x)
        # Wait for the next iteration
        rate.sleep()

    print('ending motion ...')
    fxcurrent.close()
    fxdesired.close()
    fq.close()
